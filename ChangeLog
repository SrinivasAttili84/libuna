TODO
* libuna
  - add source == destination check to functions?
  - handle combining characters in windows 1255 and 1258 ?
  - add more code pages?
  - speed test between index based and pointer based iteration
  - change libuna_codepage_ macros into inline functions ?
  - copy from/to functions should set/return amount of bytes successfully processed?
    most of the time not needed because the size of the string was already
    determined
  - implement iso-8859-5
  - implement iso-8859-6
  - implement iso-8859-7
  - implement iso-8859-8
  - implement iso-8859-9
  - implement iso-8859-10
  - implement iso-8859-11
  - implement iso-8859-12
  - implement iso-8859-13
  - implement iso-8859-14
  - implement iso-8859-15
  - implement iso-8859-16
  - implement windows-874
  - implement windows-923
  - implement utf-7

Tools:
* unaexport
  - implement export_handle
  - what happens when exporting UTF16LE as UTF16BE to UTF16LE with the BOM
  - implement signal handling
  - add conversion summary (converting from x to y with codepage z) +/-
  - update man page
  - allow for different input and output codepage?
  - implement basic globbing support for Windows?
  - determine total source file size for process status
  - add option to set buffer size?
  - check if input file is output file?
* unainfo
  - create a tool to determine the encoding type using the byte order mark
    perhaps some other tricks
    might be useful for automated conversion
  - write man page
  - update unaexport manpage 
    .Sh SEE ALSO
    .Xr unainfo 1
  - update spec.in file
  - update msvscpp project files

Test
* create automated tests and test files

Deployment:
* create debian package files
* fix AUTHORS
* update MSVSCPP solution file
  - add liberror
  - add unaprocess_status to unaexport project
  - and more
* update MacOS-X project file
  - change libuca to libuna
* Borland C++ 5.5 support

Other Windows codepages (SBC)
* 874 (Thai)
Other Windows codepages (MBC)
* 932 (Japanese Shift-JIS)
* 936 (Simplified Chinese GBK)
* 949 (Korean)
* 950 (Traditional Chinese Big5)

Note:
* iso codepage formatting conversion %s/^0x\(..\)\t0x\(....\)\t#\t/\1 = U+\2 : 
* Borland CodeGear uses numeric codepage e.g. 850

20090801
* worked on Borland/CodeGear C++ Builder support
* updated system string to always default to ASCII
* added generation of common/types.h

20090726
* worked on ISO 8859 codepages support
* added m4 directory support to autoconf/make files for libtool
* updated configure.ac
  - added langinfo support
  - added cygwin dll import support
  - added static executable support

20090725
* worked on ISO 8859 codepages support

20090702
* worked on Borland/CodeGear C++ Builder support

20090701
* several fixes for the msvscpp build
* worked on Borland/CodeGear C++ Builder support

20090630
* implemented WIN64 ssize_t fix
* worked on Borland/CodeGear C++ Builder support
* updated liberror

20090512
* removed rogue code in libuna_error.h 
* updated memwatch suppport

20090427
* fix for UTF-16 stream <= 2 should be < 2

20090418
* updated glob, process_status, date_time, system string, notify
  with libewf >= 20090418 version
* updated common code
* added safe size types to library headers

20090422
* added extra dist of libuna/libuna_defintions.h.in

20090416
* fixed missing memwatch
* fixed too large output in unaexport

20090124
* Updated headers
* Updated configure.ac to conform to cache value naming schema
* Updated autoconf/make to use flags and library definitions
* Updated unaexport man page

20081019
* Added splint to makefiles
* Updated liberror

20081011
* Updated MSVSCPP solution file for 2008 express version
* Several changes for MSVSCPP build
* fix in header file for utf16 and utf32 string size functions

20080927
* Fixed error in libuna.h

20080922
* Fixed typo in definitions and internal definitions

20080921
* first alpha release
* fixed error in distclean
* renamed docs into documents

20080920
* Worked on initial version
* Clean up of common
* replaces HAVE_WINDOWS_API by WINAPI
* moved error into liberror this make maintenace easier
* removed wide character support from configure

20080916
* Worked on initial version
* Fixed issue in error

20080914
* Worked on initial version
* Added compare functions
* Added const pointers

20080912
* Worked on initial version
* fixed issues in error handling

20080911
* Worked on initial version
* fixed issues in error handling

20080910
* Worked on initial version
* worked on local types definition

20080909
* Worked on initial version
* libuca already exists renamed to libuua
* Worked on improved error handling
* Worked on rewriting size functions

20080908
* Worked on initial version
* Moved wide character specific code to ucatools no longer used in libuca
* Fixed ucabyte_size for conversion error in 2 digit after separator
* Separated common code in to common code for tools and both libary and tools
* Worked on improved error handling
* Worked on rewriting size functions

20080904
* Worked on initial version
* Added fixed dimension to arrays in codepages header files
* Fixed issue with small UTF streams
* Fixed multiple issues in UTF-8 stream handling
* implemented process_status in ucaexport
* implemented that command line argument option can be written with - and _
* Fixed continue on error issue

20080903
* Worked on initial version
* Worked on strict mode
* Worked on uTF-8 stream functions
* Worked on MacOS-X package files

20080902
* Worked on initial version
* Worked on ucaexport summary
* Worked on UTF-16 stream functions
* Worked on UTF-32 stream functions
* Refactored to use separate UTF-8/16/32 copy_byte_order_mark functions
* Worked on uTF-8 stream functions
* Worked on byte stream size/copy from functions

20080901
* Worked on initial version
* Integrated local use of libuca using HAVE_LOCAL_LIBUNA for maintenance
* implemented UTF-8/16 to/from UTF-32_stream functions
* detection of endian defaults to big if no endianess could be determined
* added detection of UTF-8 byte order mark
* Worked on refactoring _streams to separate files change copy_to_ functions into copy_from
* Implemented libuca_utf16_string_size_from_utf8, libuca_utf32_string_size_from_utf8
* Implemented libuca_utf16_string_size_from_utf32, libuca_utf32_string_size_from_utf32
* Worked on codepages

20080831
* Worked on initial version
* Worked on codepages

20080830
* Worked on initial version
* Worked on stand alone library
* Renamed ascii to sbc (single byte character)
* Worked on codepages

20080829
* Worked on initial version
* Worked on support for converting SBC stream into UTF
* Change code into stand alone ibrary

20080828
* Worked on initial version
* Worked on support for converting SBC stream into UTF

20080827
* Worked on initial version
* Worked on support for converting SBC stream into UTF

20080826
* Worked on initial version
* Worked on Unicode conversion routines

20080825
* Worked on initial version
* Worked on Unicode conversion routines
* Added maximum allowed UTF 0x110000 in strict mode
* Worked on support for converting SBC stream into UTF

20080824
* Worked on initial version
* Worked on Unicode conversion routines

20080823
* Worked on initial version
* Worked on Unicode conversion routines

