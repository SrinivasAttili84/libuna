TODO
* work on 936 gb2312 Chinese Simplified (GB2312) support
* complete base16
  - implement base16 functions
    - add base16 functions to api
    - add error to base16
    - add flag to set upper/lower case
* complete base64
  - rename base64 functions like base16 functions?
* complete base64url

* libuna
  - add source == destination check to functions?
  - handle combining characters in windows 1255 and 1258 ?
  - speed test between index based and pointer based iteration
  - change libuna_codepage_ macros into inline functions ?
  - copy from/to functions should set/return amount of bytes successfully processed?
    most of the time not needed because the size of the string was already
    determined

  - implement support for UTF-1 ?
  - implement support for UTF-ebcdic ?
  - implement support for bocu-1 ?
  - implement support for scsu ?
  - implement support for usc-1, ucs-2, usc-4 ?

  - implement support for base32hex
  - implement support for base32

  - implement support for codepages:
    - 923 iso-2022-jp Japanese (Shift-JIS)
    - 949 ks_c_5601-1987 Korean
    - 950 big5 Chinese Traditional (Big5)
    - 50220 iso-2022-jp Japanese (JIS)
    - 50221 csISO2022JP Japanese (JIS-Allow 1 byte Kana)
    - 51932 euc-jp Japanese (EUC)
    - 51949 euc-kr Korean (EUC)
    - 52936 hz-gb-2312 Chinese Simplified (HZ)

Other Windows codepages (MBC)
* 932 (Japanese Shift-JIS)
* 936 (Simplified Chinese GBK)
* 949 (Korean)
* 950 (Traditional Chinese Big5)

Test:
* add autoconf/make test suite
* create automated tests and test files
  - UTF-7
  - base16
  - base64
  - base64url

Tools:
* unaexport
  - implement export_handle
  - what happens when exporting UTF16LE as UTF16BE to UTF16LE with the BOM
  - implement signal handling
  - add conversion summary (converting from x to y with codepage z) +/-
  - update man page
  - allow for different input and output codepage?
  - implement basic globbing support for Windows?
  - determine total source file size for process status
  - add option to set buffer size?
  - check if input file is output file?
* unainfo
  - create a tool to determine the encoding type using the byte order mark
    perhaps some other tricks
    might be useful for automated conversion
  - write man page
  - update unaexport manpage 
    .Sh SEE ALSO
    .Xr unainfo 1
  - update spec.in file
  - update msvscpp, codegear project files

Deployment:
* create debian package files
* create Borland C++ 5.5 files

Note:
* iso codepage formatting conversion %s/^0x\(..\)\t0x\(....\)\t#\t/\1 = U+\2 : 
* CodeGear uses numeric codepage e.g. 850

20100713
* updated liberror and include/error.h

20100706
* updated configure.ac, common, libsystem

20100627
* clean up
* updated common, libcstring, liberror

20100505
* updated configure.ac and Makefile.am files

20100502
* updated common, libcstring
* cleaned up configure
* changed amount of into number of
* updated msvscpp and codegear project files
* removed inline from public header
* updated libuna_error.[ch]

20100416
* updated liberror

20100328
* worked on improving UTF-7 support

20100327
* added libcstring
* updated liberror
* worked on libcstring support in libsystem and unatools
* updated msvscpp, codegear and macosx files
* worked on UTF-7 functions

20100221
* updated common, liberror, libsystem
* updated contact e-mail address

20100106
* updated common, libsystem
* worked on Borland C++ 5 compiler support

20100104
* updated common, liberror, libsystem

20100101
* updated common, liberror, libsystem
* 2010 update

20091220
* worked on UTF-7 functions
* fixed error in base64

20091219
* worked on UTF-32 compare functions
* worked on UTF-7 functions

20091214
* worked on compare functions

20091211
* worked on compare functions

20091208
* worked on percent encoding functions

20091204
* worked on compare functions

20091203
* updated common
* worked on base16 for libfdatetime

20091031
* removed All Rights Reserved

20091026
* refactored endian.h to byte_stream.h

20090930
* updated narrow_string

20090929
* updated narrow_string
* worked on UTF-7 support

20090928
* updated libsystem
* worked on codepage support for:
  - 20866 koi8-r Cyrillic (KOI8-R)
  - 21866 koi8-u Cyrillic (KOI8-U)

20090917
* added more trouble shooting code

20090901
* updated common/file_stream.h

20090828
* updated common

20090826
* fixed typo in unaexport

20090820
* small corrections in include/libuna/types.h.in
* fixed libsystem_file_io open mode

20090819
* added libsystem
* updated byte_size_string and process_status

20090809
* small fix in configure.ac

20090808
* fix for handling extern in MSC for local use of libuna
* worked on windows-874 codepage support

20090806
* worked on base64 sidn base64url upport
* moved unacommon_open to system_string
* updated unaoutput_codepages_fprint
* added unaoutput_codepage_fprint

20090805
* worked on base64 sidn base64url upport

20090802
20090804
* worked on base64 support

20090802
* worked on ISO 8859 codepages support
* worked on automated tests
* fixed several small issues

20090801
* worked on Borland/CodeGear C++ Builder support
* updated system string to always default to ASCII
* added generation of common/types.h
* worked on ISO 8859 codepages support
* fixed error in 1254 codepage
* reduced overhead in 125# codepages
* worked on automated tests
* fixed several small issues

20090726
* worked on ISO 8859 codepages support
* added m4 directory support to autoconf/make files for libtool
* updated configure.ac
  - added langinfo support
  - added cygwin dll import support
  - added static executable support

20090725
* worked on ISO 8859 codepages support

20090702
* worked on Borland/CodeGear C++ Builder support

20090701
* several fixes for the msvscpp build
* worked on Borland/CodeGear C++ Builder support

20090630
* implemented WIN64 ssize_t fix
* worked on Borland/CodeGear C++ Builder support
* updated liberror

20090512
* removed rogue code in libuna_error.h 
* updated memwatch suppport

20090427
* fix for UTF-16 stream <= 2 should be < 2

20090418
* updated glob, process_status, date_time, system string, notify
  with libewf >= 20090418 version
* updated common code
* added safe size types to library headers

20090422
* added extra dist of libuna/libuna_defintions.h.in

20090416
* fixed missing memwatch
* fixed too large output in unaexport

20090124
* Updated headers
* Updated configure.ac to conform to cache value naming schema
* Updated autoconf/make to use flags and library definitions
* Updated unaexport man page

20081019
* Added splint to makefiles
* Updated liberror

20081011
* Updated MSVSCPP solution file for 2008 express version
* Several changes for MSVSCPP build
* fix in header file for UTF-16 and UTF-32 string size functions

20080927
* Fixed error in libuna.h

20080922
* Fixed typo in definitions and internal definitions

20080921
* first alpha release
* fixed error in distclean
* renamed docs into documents

20080920
* Worked on initial version
* Clean up of common
* replaces HAVE_WINDOWS_API by WINAPI
* moved error into liberror this make maintenace easier
* removed wide character support from configure

20080916
* Worked on initial version
* Fixed issue in error

20080914
* Worked on initial version
* Added compare functions
* Added const pointers

20080912
* Worked on initial version
* fixed issues in error handling

20080911
* Worked on initial version
* fixed issues in error handling

20080910
* Worked on initial version
* worked on local types definition

20080909
* Worked on initial version
* libuca already exists renamed to libuua
* Worked on improved error handling
* Worked on rewriting size functions

20080908
* Worked on initial version
* Moved wide character specific code to ucatools no longer used in libuca
* Fixed ucabyte_size for conversion error in 2 digit after separator
* Separated common code in to common code for tools and both libary and tools
* Worked on improved error handling
* Worked on rewriting size functions

20080904
* Worked on initial version
* Added fixed dimension to arrays in codepages header files
* Fixed issue with small UTF streams
* Fixed multiple issues in UTF-8 stream handling
* implemented process_status in ucaexport
* implemented that command line argument option can be written with - and _
* Fixed continue on error issue

20080903
* Worked on initial version
* Worked on strict mode
* Worked on UTF-8 stream functions
* Worked on MacOS-X package files

20080902
* Worked on initial version
* Worked on ucaexport summary
* Worked on UTF-16 stream functions
* Worked on UTF-32 stream functions
* Refactored to use separate UTF-8/16/32 copy_byte_order_mark functions
* Worked on UTF-8 stream functions
* Worked on byte stream size/copy from functions

20080901
* Worked on initial version
* Integrated local use of libuca using HAVE_LOCAL_LIBUNA for maintenance
* implemented UTF-8/16 to/from UTF-32_stream functions
* detection of endian defaults to big if no endianess could be determined
* added detection of UTF-8 byte order mark
* Worked on refactoring _streams to separate files change copy_to_ functions into copy_from
* Implemented libuca_utf16_string_size_from_utf8, libuca_utf32_string_size_from_utf8
* Implemented libuca_utf16_string_size_from_utf32, libuca_utf32_string_size_from_utf32
* Worked on codepages

20080831
* Worked on initial version
* Worked on codepages

20080830
* Worked on initial version
* Worked on stand alone library
* Renamed ascii to sbc (single byte character)
* Worked on codepages

20080829
* Worked on initial version
* Worked on support for converting SBC stream into UTF
* Change code into stand alone ibrary

20080828
* Worked on initial version
* Worked on support for converting SBC stream into UTF

20080827
* Worked on initial version
* Worked on support for converting SBC stream into UTF

20080826
* Worked on initial version
* Worked on Unicode conversion routines

20080825
* Worked on initial version
* Worked on Unicode conversion routines
* Added maximum allowed UTF 0x110000 in strict mode
* Worked on support for converting SBC stream into UTF

20080824
* Worked on initial version
* Worked on Unicode conversion routines

20080823
* Worked on initial version
* Worked on Unicode conversion routines

